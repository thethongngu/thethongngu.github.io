---
import "../styles/global.css";
// Comic metadata
const comics = [
  { id: 1, title: "Dev Keyboard Evolution" },
  { id: 2, title: "Active Record" },
  { id: 3, title: "Unlimited Plan" },
];
---

<div class="comic-carousel">
  <div class="flex justify-center items-center gap-2 mb-4">
    <button
      class="px-3 py-2 border border-gray-300 bg-white rounded text-sm cursor-pointer min-w-10 flex items-center justify-center transition-all duration-200 hover:!border-blue-600 hover:!text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:!border-gray-300 disabled:hover:!text-gray-800"
      id="first-btn"
      title="First page"
    >
      «
    </button>
    <button
      class="px-3 py-2 border border-gray-300 bg-white rounded text-sm cursor-pointer min-w-10 flex items-center justify-center transition-all duration-200 hover:!border-blue-600 hover:!text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:!border-gray-300 disabled:hover:!text-gray-800"
      id="prev-btn"
      title="Previous page"
    >
      ‹
    </button>
    <div class="flex items-center gap-1 mx-2">
      <input
        type="number"
        class="w-12 p-1 border border-gray-300 rounded font-mono text-sm text-center focus:outline-none focus:border-blue-600"
        id="page-input"
        min="1"
      />
      <span class="text-gray-600 text-sm" id="page-total">/ 1</span>
    </div>
    <button
      class="px-3 py-2 border border-gray-300 bg-white rounded text-sm cursor-pointer min-w-10 flex items-center justify-center transition-all duration-200 hover:!border-blue-600 hover:!text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:!border-gray-300 disabled:hover:!text-gray-800"
      id="next-btn"
      title="Next page"
    >
      ›
    </button>
    <button
      class="px-3 py-2 border border-gray-300 bg-white rounded text-sm cursor-pointer min-w-10 flex items-center justify-center transition-all duration-200 hover:!border-blue-600 hover:!text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:!border-gray-300 disabled:hover:!text-gray-800"
      id="last-btn"
      title="Last page"
    >
      »
    </button>
  </div>
  <div id="comic-container" class="my-8">
    <!-- Comic will be loaded here dynamically -->
  </div>
</div>

<script define:vars={{ comics }}>
  let currentComic = 0;
  const totalComics = comics.length;
  const pageInput = document.getElementById("page-input");
  const pageTotal = document.getElementById("page-total");
  const comicContainer = document.getElementById("comic-container");

  async function loadComic(index) {
    try {
      const comic = comics[index];
      if (!comic) return;

      // Clear current comic
      comicContainer.innerHTML = "";

      // Create new comic elements
      const comicSlide = document.createElement("div");
      comicSlide.className = "block";

      const img = document.createElement("img");
      img.className =
        "max-w-full md:max-w-2xl w-full h-auto block mx-auto rounded border border-gray-300";
      img.alt = `Comic Page ${comic.id}`;

      // Show loading state
      const loadingText = document.createElement("p");
      loadingText.textContent = "Loading...";
      loadingText.className =
        "text-center p-8 text-gray-600 text-sm bg-gray-50 rounded border border-gray-300";
      comicSlide.appendChild(loadingText);
      comicContainer.appendChild(comicSlide);

      // Load the image
      const paddedId = comic.id.toString().padStart(2, "0");
      img.src = `/assets/comics/comic${paddedId}.jpg`;

      // Wait for image to load
      await new Promise((resolve, reject) => {
        img.onload = resolve;
        img.onerror = reject;
      });

      // Remove loading text and show image
      comicSlide.removeChild(loadingText);
      comicSlide.appendChild(img);

      const title = document.createElement("p");
      title.className = "text-center my-4 text-sm text-gray-600";
      title.textContent = comic.title;
      comicSlide.appendChild(title);

      currentComic = index;
      updatePagination();
    } catch (error) {
      console.error("Error loading comic:", error);
      comicContainer.innerHTML =
        '<p class="text-center p-8 text-red-600 bg-red-50 rounded border border-red-300">Failed to load comic</p>';
    }
  }

  function goToPage(page) {
    // Ensure page is within bounds
    if (page >= totalComics) {
      page = totalComics - 1;
    } else if (page < 0) {
      page = 0;
    }

    loadComic(page);
  }

  function goToPageFromInput(value) {
    // Convert input value to zero-based index
    const page = parseInt(value) - 1;
    goToPage(page);
  }

  function updatePagination() {
    // Update input field and total pages
    pageInput.value = currentComic + 1;
    pageTotal.textContent = `/ ${totalComics}`;

    // Update button states
    document.getElementById("first-btn").disabled = currentComic === 0;
    document.getElementById("prev-btn").disabled = currentComic === 0;
    document.getElementById("next-btn").disabled =
      currentComic === totalComics - 1;
    document.getElementById("last-btn").disabled =
      currentComic === totalComics - 1;
  }

  // Event listeners
  document.getElementById("first-btn").onclick = () => goToPage(0);
  document.getElementById("prev-btn").onclick = () =>
    goToPage(currentComic - 1);
  document.getElementById("next-btn").onclick = () =>
    goToPage(currentComic + 1);
  document.getElementById("last-btn").onclick = () => goToPage(totalComics - 1);
  document.getElementById("page-input").onchange = (e) =>
    goToPageFromInput(e.target.value);

  // Initialize pagination
  pageInput.value = 1;
  pageTotal.textContent = `/ ${totalComics}`;
  pageInput.max = totalComics;
  loadComic(0); // Load first comic
</script>
